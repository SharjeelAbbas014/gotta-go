{"version":3,"sources":["loading.gif","back.svg","serviceWorker.js","firebase.js","login/login.jsx","ChatList/ChatList.jsx","chatView/chatView.jsx","chatBox/chatBox.jsx","newChat/newChat.jsx","dashboard/dashboard.jsx","signup/signup.jsx","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","userExist","email","a","db","collection","get","usersSnapshot","exists","docs","map","doc","data","includes","app","initializeApp","this","auth","firestore","password","isLogin","signInWithEmailAndPassword","signOut","name","createUserWithEmailAndPassword","authRes","userObj","user","set","currentUser","updateProfile","displayName","onAuthStateChanged","_usr","setEmail","setChats","where","onSnapshot","res","chats","_doc","msg","docKey","update","messages","FieldValue","arrayUnion","sender","message","timestamp","Date","now","receiverHasRead","chatObj","g","users","sendTo","console","log","withRouter","props","useState","setPassword","loading","setLoading","loginMe","firebase","login","history","replace","alert","id","className","alt","src","image","role","onSubmit","e","preventDefault","aria-label","type","required","autoFocus","value","onChange","target","htmlFor","onClick","ChatList","length","newchat","newChat","logout","userIsSender","chat","userEmail","selectedChatIndex","index","selectChatFn","filter","substring","ChatView","mobile","setSelectedChat","done","setDone","useEffect","container","document","getElementById","scrollHeight","scrollTo","querySelector","undefined","back","ChatBox","setMsg","submitMessage","messageValid","submitMsgFn","txt","onKeyUp","keyCode","userTyping","placeholder","NewChat","uEmail","setUEmail","chatExists","buildDocKey","submitNewChat","goToChat","createChat","newChatSubmitFn","goToChatFn","sort","join","setNewChat","DashboardComponent","selectedChat","newChatFormVisible","setNewChatFormVisible","isMobile","innerWidth","newChatButtonClicked","getUserChatList","selectChat","chatIndex","messageRead","friend","usr","clickedChatWhereNotSender","hasRead","addMessage","usersInChat","split","find","cha","every","_user","indexOf","newChatSubmit","newChatButtonFn","setName","conPass","setConPass","isMatching","setIsMatching","registeMe","register","to","routing","path","exact","component","LoginComponent","SignUpComponent","Dashboard","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.3611efbe.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/loading.9dc92fc6.gif\";","module.exports = __webpack_public_path__ + \"static/media/back.4d0880fb.svg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import app from 'firebase/app'\r\nimport 'firebase/auth'\r\nimport 'firebase/firebase-firestore'\r\nconst config = {\r\n    apiKey: \"AIzaSyASNXhfa9YOFQUh6sb0JkaFFtF3GxpYxgY\",\r\n    authDomain: \"gotta-go-4cbcb.firebaseapp.com\",\r\n    databaseURL: \"https://gotta-go-4cbcb.firebaseio.com\",\r\n    projectId: \"gotta-go-4cbcb\",\r\n    storageBucket: \"gotta-go-4cbcb.appspot.com\",\r\n    messagingSenderId: \"632875817321\",\r\n    appId: \"1:632875817321:web:8a14181acd4303749505f8\",\r\n    measurementId: \"G-P3YC46LM98\"\r\n}\r\n\r\nclass Firebase {\r\n    constructor() {\r\n        app.initializeApp(config);\r\n        this.auth = app.auth();\r\n        this.db = app.firestore();\r\n    }\r\n\r\n    login(email, password) {\r\n        this.isLogin = true;\r\n        return this\r\n            .auth\r\n            .signInWithEmailAndPassword(email, password)\r\n    }\r\n    logout() {\r\n        this.isLogin = false;\r\n        return this\r\n            .auth\r\n            .signOut()\r\n    }\r\n    async register(name, email, password) {\r\n        const authRes = await this\r\n            .auth\r\n            .createUserWithEmailAndPassword(email, password);\r\n        const userObj = {\r\n            email: authRes.user.email,\r\n            name: name\r\n        };\r\n        await this\r\n            .db\r\n            .collection('users')\r\n            .doc(email)\r\n            .set(userObj)\r\n        return this\r\n            .auth\r\n            .currentUser\r\n            .updateProfile({displayName: name})\r\n    }\r\n    userLogin() {\r\n        this\r\n            .auth\r\n            .onAuthStateChanged(_usr => {\r\n                if (_usr === null) {\r\n                    return false;\r\n                }\r\n            })\r\n        return true;\r\n    }\r\n    getUserChatList(setEmail, setChats) {\r\n        this\r\n            .auth\r\n            .onAuthStateChanged(async _usr => {\r\n                if (_usr !== null) {\r\n                    this\r\n                        .db\r\n                        .collection('chats')\r\n                        .where('users', 'array-contains', _usr.email)\r\n                        .onSnapshot(async res => {\r\n                            const chats = res\r\n                                .docs\r\n                                .map(_doc => _doc.data())\r\n                            await setChats(chats)\r\n                            await setEmail(_usr.email)\r\n                        });\r\n                }\r\n            })\r\n    }\r\n\r\n    addMessage(email, msg, docKey) {\r\n        this\r\n            .db\r\n            .collection('chats')\r\n            .doc(docKey)\r\n            .update({\r\n                messages: app\r\n                    .firestore\r\n                    .FieldValue\r\n                    .arrayUnion({\r\n                        sender: email,\r\n                        message: msg,\r\n                        timestamp: Date.now()\r\n                    }),\r\n                receiverHasRead: false\r\n            })\r\n    }\r\n    hasRead(docKey) {\r\n        this\r\n            .db\r\n            .collection('chats')\r\n            .doc(docKey)\r\n            .update({receiverHasRead: true})\r\n    }\r\n    userExist = async(email) => {\r\n        const usersSnapshot = await this\r\n            .db\r\n            .collection('users')\r\n            .get();\r\n        const exists = usersSnapshot\r\n            .docs\r\n            .map(doc => doc.data().email)\r\n            .includes(email);\r\n        return exists;\r\n    }\r\n    newChatSubmit(docKey, email, chatObj) {\r\n        const g = {\r\n            receiverHasRead: false,\r\n            users: [\r\n                email, chatObj.sendTo\r\n            ],\r\n            messages: [\r\n                {\r\n                    message: chatObj.message,\r\n                    sender: email\r\n                }\r\n            ]\r\n        };\r\n        console.log(g);\r\n        this\r\n            .db\r\n            .collection('chats')\r\n            .doc(docKey)\r\n            .set(g)\r\n    }\r\n}\r\n\r\nexport default new Firebase();","import React, {useState} from 'react';\r\nimport {withRouter} from 'react-router'\r\nimport image from '../loading.gif'\r\nimport 'materialize-css'\r\nimport 'materialize-css/dist/css/materialize.min.css'\r\nimport './login.css'\r\nimport firebase from '../firebase'\r\n\r\nconst LoginComponent = (props) => {\r\n\r\n    const [email,setEmail] = useState('');\r\n    const [password,setPassword] = useState('');\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    const loginMe = async()=>{\r\n        setLoading(true);\r\n            try{\r\n                await firebase.login(email,password)\r\n                setLoading(false);\r\n                props.history.replace('/dashboard');\r\n            }catch(error){\r\n                setLoading(false);\r\n                alert(error.message);\r\n            }\r\n    }\r\n    const gotoSignUp = ()=>{\r\n        props.history.replace('/signup')\r\n    }\r\n    return (\r\n        <div id=\"signBack\">\r\n            {loading?<div className=\"loading\"><img alt=\"Loading\" src={image}/></div>:null}\r\n            <div id=\"form\">\r\n                <h2>Gotta GO!<span role=\"img\" onSubmit={e=>e.preventDefault() && false} aria-label=\"RunEmoji\">🏃‍♂️</span></h2>\r\n                <h3>Sign In</h3>\r\n                <div className=\"input-field col s12\">\r\n                    <input id=\"email\" type=\"email\" className=\"validate\" required autoFocus value={email} onChange={e=>setEmail(e.target.value)}/>\r\n                    <label htmlFor=\"email\">Enter Your Email</label>\r\n                </div>\r\n               \r\n                <div className=\"input-field col s12\">\r\n                    <input id=\"password\" type=\"password\" className=\"validate\" required value={password} onChange={e=>setPassword(e.target.value)}/>\r\n                    <label htmlFor=\"password\">Enter Your Password</label>\r\n                </div>\r\n                \r\n                <button className=\"cusButton\" type=\"submit\" onClick={loginMe}>Login</button>\r\n                <button className=\"cusButton\" id=\"withGoogle\" onClick={gotoSignUp}>Sign Up</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default withRouter(LoginComponent);","import React, {useEffect, useState} from 'react'\r\n\r\nimport './ChatList.css'\r\n\r\nconst ChatList = (props) => {\r\n    console.log(props.chats.length);\r\n    const newchat = () => {\r\n        props.newChat(true);\r\n    }\r\n    const selectChat = (index) =>{\r\n        props.selectChatFn(index);\r\n    }\r\n    const signOut = () => {\r\n        props\r\n            .signOut\r\n            .logout();\r\n        props\r\n            .history\r\n            .replace('/login')\r\n    }\r\n    const userIsSender = (chat)=> chat.messages[chat.messages.length -1].sender === props.userEmail;\r\n    if (props.chats.length > 0) {\r\n        return (\r\n            <div id=\"chatList\">\r\n                                <br/>\r\n                <button id=\"newChat\" onClick={newchat}>\r\n                    Create New Chat\r\n                </button>\r\n                <div id=\"ActualChat\">\r\n                    {console.log(\"hell\", props.selectedChatIndex)}\r\n                    {props\r\n                        .chats\r\n                        .map((chat, index) => (\r\n                            <div\r\n                                onClick={() => props.selectChatFn(index)}\r\n                                className=\"personName\"\r\n                                id={props.selectedChatIndex === index\r\n                                ? \"selected\"\r\n                                : chat.receiverHasRead === false && !userIsSender(chat)?\"notRead\":\"\"}>\r\n                                <h3>{chat\r\n                                        .users\r\n                                        .filter(user => user !== props.userEmail)[0]\r\n                                        .substring(0,20)}</h3>\r\n                                <p>{chat\r\n                                        .messages[chat.messages.length - 1]\r\n                                        .message\r\n                                        .substring(0, 20)}</p>\r\n                            </div>\r\n                        ))\r\n}\r\n                </div>\r\n                <button id=\"signOut\" onClick={signOut}>Sign Out!</button>\r\n            </div>\r\n        )\r\n    } else {\r\n        return (\r\n            <div id=\"chatList\">\r\n                <br/>\r\n                <button id=\"newChat\" onClick={newchat}>\r\n                    Create New Chat\r\n                </button>\r\n    \r\n                <div>\r\n                    <div className=\"personName\">\r\n                        <h3>No Chats</h3>\r\n                    </div>\r\n                </div>\r\n                <button id=\"signOut\" onClick={signOut}>Sign Out!</button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ChatList;","import React, {useEffect, useState} from 'react';\r\nimport './chatView.css'\r\nimport back from '../back.svg'\r\nconst ChatView = ({chat, user, mobile, setSelectedChat}) => {\r\n    const [done,\r\n        setDone] = useState(false);\r\n        const goBack = ()=>{\r\n            setSelectedChat(null)\r\n        }\r\n    useEffect(() => {\r\n        const container = document.getElementById('chatView');\r\n        if (container) {\r\n            console.log(container.scrollHeight);\r\n            window.scrollTo(0, document.querySelector(\"#chatView\").scrollHeight);\r\n        }\r\n    }, [chat])\r\n    if (chat !== undefined) {\r\n        if (!mobile) {\r\n            return (\r\n                <div id=\"chatView\">\r\n                    {chat\r\n                        .messages\r\n                        .map((msg, index) => {\r\n                            if (!done) {\r\n                                setDone(true)\r\n                            }\r\n                            return (\r\n                                <div\r\n                                    className={msg.sender === user\r\n                                    ? \"myMsg\"\r\n                                    : \"otherMsg\"}\r\n                                    id={index === chat.messages.length - 1\r\n                                    ? \"last\"\r\n                                    : \"\"}>\r\n                                    <div >\r\n                                        <p>{msg.message}</p>\r\n                                    </div>\r\n                                </div>\r\n                            )\r\n                        })\r\n}\r\n\r\n                </div>\r\n\r\n            )\r\n        } else {\r\n            return (\r\n                <div id=\"chatView\">\r\n                    <div id=\"backDiv\">\r\n            <img onClick={goBack} src={back}/>\r\n                    </div>\r\n                    {chat\r\n                        .messages\r\n                        .map((msg, index) => {\r\n                            if (!done) {\r\n                                setDone(true)\r\n                            }\r\n                            return (\r\n                                <div\r\n                                    className={msg.sender === user\r\n                                    ? \"myMsg\"\r\n                                    : \"otherMsg\"}\r\n                                    id={index === chat.messages.length - 1\r\n                                    ? \"last\"\r\n                                    : \"\"}>\r\n                                    <div >\r\n                                        <p>{msg.message}</p>\r\n                                    </div>\r\n                                </div>\r\n                            )\r\n                        })\r\n}\r\n\r\n                </div>\r\n\r\n            )\r\n        }\r\n    } else {\r\n        return (\r\n            <div id=\"chatView\"></div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ChatView;","import React, {useState} from 'react'\r\nimport './chatBox.css'\r\n\r\nconst ChatBox = (props) => {\r\n    const [msg,\r\n        setMsg] = useState(\"\")\r\n    const userTyping = (e) => {\r\n        if (e.keyCode === 13) {\r\n            submitMessage()\r\n        }\r\n    }\r\n    const submitMessage = () => {\r\n        if (messageValid(msg)) {\r\n            props.submitMsgFn(msg);\r\n            document\r\n                .getElementById('message')\r\n                .value = ''\r\n        }\r\n    }\r\n    const messageValid = (txt) => txt && txt\r\n        .replace(/\\s/g, '')\r\n        .length;\r\n\r\n    if (props.chats !== undefined) {\r\n        return (\r\n            <div id=\"chatBox\">\r\n              \r\n                <button onClick={submitMessage}>Send</button>\r\n                <input\r\n                    onKeyUp={e => userTyping(e)}\r\n                    type=\"text\"\r\n                    id=\"message\"\r\n                    onChange=\r\n                    {e=>setMsg(e.target.value)}\r\n                    placeholder=\"Type your Message\"/>\r\n            </div>\r\n        )\r\n    } else {\r\n        return (\r\n            <div></div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default ChatBox;","import React, {useState, useEffect} from 'react'\r\nimport back from '../back.svg'\r\nimport './newChat.css'\r\n\r\nconst NewChat = (props) => {\r\n    const [msg,\r\n        setMsg] = useState('');\r\n    const [uEmail,\r\n        setUEmail] = useState('');\r\n    const chatExists = async() => {\r\n        const docKey = buildDocKey();\r\n        const chat = await props\r\n            .firebase\r\n            .db\r\n            .collection('chats')\r\n            .doc(docKey)\r\n            .get();\r\n        return chat.exists;\r\n    }\r\n    const userExist = () => {\r\n        return props\r\n            .firebase\r\n            .userExist();\r\n    }\r\n\r\n    const submitNewChat = async(e) => {\r\n        e.preventDefault();\r\n        const userExistn = await userExist();\r\n        if (userExistn) {\r\n            const chatExisto = await chatExists();\r\n            chatExisto\r\n                ? goToChat()\r\n                : createChat();\r\n        }\r\n    }\r\n    const createChat = () => {\r\n        props.newChatSubmitFn({sendTo: uEmail, message: msg});\r\n    }\r\n    const goToChat = () => props.goToChatFn(buildDocKey(), msg);\r\n    const buildDocKey = () => {\r\n        return [props.firebase.auth.currentUser.email, uEmail]\r\n            .sort()\r\n            .join(':');\r\n    }\r\n    const goBack =()=>{\r\n        props.setNewChat(false);\r\n    }\r\n    return (\r\n        <div id=\"createChat\">\r\n            <div id=\"backDiv\">\r\n                <img onClick={goBack} src={back}/>\r\n            </div>\r\n            <div id=\"form\">\r\n                <h2>Create New Chat</h2>\r\n                <br/>\r\n                <div className=\"input-field col s12\">\r\n                    <input\r\n                        onChange={e => setUEmail(e.target.value)}\r\n                        id=\"email\"\r\n                        type=\"email\"\r\n                        className=\"validate\"\r\n                        required\r\n                        autoFocus/>\r\n                    <label htmlFor=\"email\">Enter Your Email</label>\r\n                </div>\r\n                <div className=\"input-field col s12\">\r\n                    <input\r\n                        onChange={e => setMsg(e.target.value)}\r\n                        id=\"message\"\r\n                        type=\"text\"\r\n                        className=\"validate\"\r\n                        required/>\r\n                    <label htmlFor=\"message\">Enter Your Message</label>\r\n                </div>\r\n                <button onClick={submitNewChat} className=\"cusButton\">Send</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NewChat;","import React, {useState, useEffect} from 'react';\r\nimport ChatList from '../ChatList/ChatList'\r\nimport firebase from '../firebase'\r\nimport ChatView from '../chatView/chatView';\r\nimport ChatBox from '../chatBox/chatBox';\r\nimport NewChat from '../newChat/newChat';\r\nimport './dashboard.css'\r\nconst DashboardComponent = (props) => {\r\n    const [selectedChat,\r\n        setSelectedChat] = useState(null);\r\n    const [newChatFormVisible,\r\n        setNewChatFormVisible] = useState(false);\r\n    const [email,\r\n        setEmail] = useState(null);\r\n    const [chats,\r\n        setChats] = useState([]);\r\n    const [newChat,\r\n        setNewChat] = useState(false);\r\n    const isMobile = window.innerWidth <= 850;\r\n    const newChatButtonClicked = () => {\r\n        setNewChatFormVisible(true);\r\n        setSelectedChat(null)\r\n    }\r\n    useEffect(() => {\r\n        firebase.getUserChatList(setEmail, setChats);\r\n    }, []);\r\n    const selectChat = async(chatIndex) => {\r\n        await setSelectedChat(chatIndex);\r\n        setNewChat(false);\r\n        messageRead(chatIndex);\r\n    }\r\n    const buildDocKey = (friend) => {\r\n        return [email, friend]\r\n            .sort()\r\n            .join(':');\r\n    }\r\n    const clickedChatWhereNotSender = (index) => chats[index].messages[chats[index].messages.length - 1] !== email;\r\n    const messageRead = (index) => {\r\n        const docKey = buildDocKey(chats[index].users.filter(usr => usr !== email)[0])\r\n        if (clickedChatWhereNotSender(index)) {\r\n            firebase.hasRead(docKey)\r\n        }\r\n    }\r\n    const submitMessage = (msg) => {\r\n        const docKey = buildDocKey(chats[selectedChat].users.filter(usr => usr !== email)[0])\r\n        firebase.addMessage(email, msg, docKey)\r\n        console.log(docKey);\r\n    }\r\n    const goToChat = async(docKey, message) => {\r\n        const usersInChat = docKey.split(':');\r\n        const chat = chats.find(cha => usersInChat.every(_user => cha.users.includes(_user)));\r\n        setNewChatFormVisible(false)\r\n        await selectedChat(chats.indexOf(chat));\r\n        submitMessage(message);\r\n    }\r\n    const newChatSubmit = async(chatObj) => {\r\n        const docKey = buildDocKey(chatObj.sendTo);\r\n        await firebase.newChatSubmit(docKey, email, chatObj);\r\n        setNewChatFormVisible(false)\r\n        setSelectedChat(chats.length - 1)\r\n    }\r\n    if (!isMobile) {\r\n        return (\r\n            <div>\r\n                <ChatList\r\n                    history={props.history}\r\n                    newChatButtonFn={newChatButtonClicked}\r\n                    selectChatFn={selectChat}\r\n                    signOut={firebase}\r\n                    chats={chats}\r\n                    userEmail={email}\r\n                    selectedChatIndex={selectedChat}\r\n                    newChat\r\n                    ={setNewChat}></ChatList>\r\n                {newChat === true\r\n                    ? <NewChat\r\n                            goToChatFn={goToChat}\r\n                            newChatSubmitFn={newChatSubmit}\r\n                            firebase={firebase}></NewChat>\r\n                    : newChatFormVisible\r\n                        ? null\r\n                        : <ChatView user={email} chat={chats[selectedChat]}></ChatView>\r\n}\r\n                <ChatBox chats={chats[selectedChat]} submitMsgFn={submitMessage}></ChatBox>\r\n            </div>\r\n        )\r\n    } else {\r\n        if (selectedChat === null) {\r\n            return (\r\n                <div>\r\n                    {newChat === true\r\n                        ? <NewChat\r\n                                goToChatFn={goToChat}\r\n                                newChatSubmitFn={newChatSubmit}\r\n                                setNewChat={setNewChat}\r\n                                firebase={firebase}\r\n                                mobile={isMobile}></NewChat>\r\n                        : <ChatList\r\n                            history={props.history}\r\n                            newChatButtonFn={newChatButtonClicked}\r\n                            selectChatFn={selectChat}\r\n                            signOut={firebase}\r\n                            chats={chats}\r\n                            userEmail={email}\r\n                            selectedChatIndex={selectedChat}\r\n                            newChat\r\n                            ={setNewChat}></ChatList>}\r\n\r\n                </div>\r\n            )\r\n        } else {\r\n            return (\r\n                <div>{newChat === true\r\n                        ? <NewChat\r\n                                goToChatFn={goToChat}\r\n                                newChatSubmitFn={newChatSubmit}\r\n                                firebase={firebase}></NewChat>\r\n                        : newChatFormVisible\r\n                            ? null\r\n                            : <ChatView\r\n                                mobile={isMobile}\r\n                                setSelectedChat={setSelectedChat}\r\n                                user={email}\r\n                                chat={chats[selectedChat]}></ChatView>\r\n}\r\n                    <ChatBox chats={chats[selectedChat]} submitMsgFn={submitMessage}></ChatBox>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\nexport default DashboardComponent;","import React, {useState} from 'react';\r\nimport {Link} from 'react-router-dom'\r\nimport {withRouter} from 'react-router'\r\nimport image from '../loading.gif'\r\nimport 'materialize-css'\r\nimport 'materialize-css/dist/css/materialize.min.css'\r\nimport './signup.css'\r\nimport firebase from '../firebase'\r\n\r\nconst SignUpComponent = (props) => {\r\n\r\n    const [email,setEmail] = useState('');\r\n    const [password,setPassword] = useState('');\r\n    const [name,setName] = useState('');\r\n    const [conPass,setConPass] = useState('');\r\n    const [isMatching,setIsMatching] = useState(true);\r\n    const [loading, setLoading] = useState(false);\r\n    console.log(email);\r\n    const registeMe = async()=>{\r\n        setLoading(true);\r\n        if(password !== conPass){\r\n            setIsMatching(false);\r\n        }\r\n        else{\r\n            setIsMatching(true);\r\n            try{\r\n                await firebase.register(name,email,password)\r\n                setLoading(false);\r\n                props.history.replace('/dashboard');\r\n            }catch(error){\r\n                setLoading(false);\r\n                alert(error.message);\r\n            }\r\n        }\r\n    }\r\n    return (\r\n        <div id=\"signBack\">\r\n            {loading?<div className=\"loading\"><img alt=\"loading\" src={image}/></div>:null}\r\n            <div id=\"form\">\r\n                <h2>Gotta GO!<span role=\"img\" onSubmit={e=>e.preventDefault() && false} aria-label=\"RunEmoji\">🏃‍♂️</span></h2>\r\n                <h3>Sign Up</h3>\r\n                {isMatching?<p></p>:<p>Passwords Does Not Match</p>}\r\n                <div className=\"input-field col s12\">\r\n                    <input id=\"email\" type=\"email\" className=\"validate\" required autoFocus value={email} onChange={e=>setEmail(e.target.value)}/>\r\n                    <label htmlFor=\"email\">Enter Your Email</label>\r\n                </div>\r\n                <div className=\"input-field col s12\">\r\n                    <input id=\"name\" type=\"text\" className=\"validate\" required value={name} onChange={e=>setName(e.target.value)}/>\r\n                    <label htmlFor=\"name\">Enter Your Name</label>\r\n                </div>\r\n                <div className=\"input-field col s12\">\r\n                    <input id=\"password\" type=\"password\" className=\"validate\" required value={password} onChange={e=>setPassword(e.target.value)}/>\r\n                    <label htmlFor=\"password\">Enter Your Password</label>\r\n                </div>\r\n                \r\n                <div className=\"input-field col s12\">\r\n                    <input id=\"conPass\" type=\"password\" className=\"validate\" required value={conPass} onChange={e=>setConPass(e.target.value)}/>\r\n                    <label htmlFor=\"conPass\">Confirm Your Password</label>\r\n                </div>\r\n                <button className=\"cusButton\" type=\"submit\" onClick={registeMe}>Register Me!</button>\r\n                {/* <button className=\"cusButton\" id=\"withGoogle\">Register With Google!</button> */}\r\n                <p>Already Have An Account?</p>\r\n                <Link to='/Login'>Sign In!</Link>\r\n            </div>\r\n        </div>\r\n    )\r\n    \r\n}\r\n\r\nexport default withRouter(SignUpComponent);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport {Route, BrowserRouter as Router } from 'react-router-dom';\nimport LoginComponent from './login/login';\nimport Dashboard from './dashboard/dashboard';\nimport SignUpComponent from './signup/signup'\n\nconst routing = (\n  <Router>\n    <div id=\"routingContainer\">\n    <Route path='/' exact component={LoginComponent}></Route>\n      <Route path='/login' component={LoginComponent}></Route>\n      <Route path='/signup' component={SignUpComponent}></Route>\n      <Route path='/dashboard' component={Dashboard}></Route>\n    </div>\n  </Router>\n);\n\nReactDOM.render(\n  routing,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}